import axios from 'axios';

const API_URL = 'http://localhost:3000/api';

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// INTERCEPTOR - dodaje token do każdego requesta
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export const parkingAPI = {
  getAllParkings: async () => {
    try {
      const response = await api.get('/lots');
      return response.data;
    } catch (error) {
      console.error('Błąd przy pobieraniu parkingów:', error);
      throw error;
    }
  },

  getParkingById: async (id) => {
    try {
      const response = await api.get(`/lots/${id}`);
      return response.data;
    } catch (error) {
      console.error(`Błąd przy pobieraniu parkingu ${id}:`, error);
      throw error;
    }
  },

  createParking: async (parkingData) => {
    try {
      const response = await api.post('/parking-lots', parkingData);
      return response.data;
    } catch (error) {
      console.error('Błąd przy tworzeniu parkingu:', error);
      throw error;
    }
  }
};

export const reservationAPI = {
  createReservation: async (reservationData) => {
    try {
      const response = await api.post('/reservations', reservationData);
      return response.data;
    } catch (error) {
      console.error('Błąd przy tworzeniu rezerwacji:', error);
      throw error;
    }
  },

  getMyReservations: async () => {
    try {
      const response = await api.get('/reservations/my');
      return response.data.reservations || [];
    } catch (error) {
      console.error('Błąd przy pobieraniu rezerwacji:', error);
      throw error;
    }
  },

  getReservationById: async (id) => {
    try {
      const response = await api.get(`/reservations/${id}`);
      return response.data;
    } catch (error) {
      console.error('Błąd przy pobieraniu rezerwacji:', error);
      throw error;
    }
  },

  cancelReservation: async (id) => {
    try {
      const response = await api.put(`/reservations/${id}/cancel`);
      return response.data;
    } catch (error) {
      console.error('Błąd przy anulowaniu rezerwacji:', error);
      throw error;
    }
  }
};

export const userAPI = {
  getStats: async () => {
    try {
      const response = await api.get('/users/stats');
      return response.data.stats;
    } catch (error) {
      console.error('Błąd przy pobieraniu statystyk:', error);
      throw error;
    }
  }
};

export default api;