services:
  postgres:
    image: postgres:15-alpine
    container_name: parkchain_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: parkchain_db
      POSTGRES_USER: parkchain_user
      POSTGRES_PASSWORD: parkchain_secure_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Ta linia wczyta Twój schemat bazy przy pierwszym starcie
      - ./backend/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - parkchain_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U parkchain_user -d parkchain_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: parkchain_redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - parkchain_network

  # --- TO JEST KLUCZOWA, BRAKUJĄCA CZĘŚĆ ---
  backend:
    build: ./backend  # Mówi Dockerowi, żeby zbudował obraz z folderu 'backend'
    container_name: parkchain_backend
    restart: unless-stopped
    ports:
      - "3000:3000"  # Udostępnia port 3000 Twojego serwera
    environment:
      # Podajemy backendowi adres do bazy 'postgres' w Dockerze
      DATABASE_URL: "postgresql://parkchain_user:parkchain_secure_pass@postgres:5432/parkchain_db"
      DB_SSL: "false" 
      PORT: 3000
      # Upewnij się, że Twój frontend działa na tym porcie
      ALLOWED_ORIGINS: "http://localhost:5173" 
    networks:
      - parkchain_network
    depends_on:
      postgres:
        # Backend poczeka, aż baza danych będzie gotowa
        condition: service_healthy 

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  parkchain_network:
    driver: bridge